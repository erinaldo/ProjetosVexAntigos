using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using SistranBLL;
using System.Configuration;
using System.Data;
//using Microsoft.Reporting.WebForms;
using System.Text.RegularExpressions;
using System.Globalization;
using System.Threading;
using AjaxControlToolkit;

public partial class Det01 : System.Web.UI.Page
{
   // string select = "";

    protected void Page_Load(object sender, EventArgs e)
    {
        try
        {
            Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture("pt-BR");
            Thread.CurrentThread.CurrentUICulture = new CultureInfo("pt-BR");
            CultureInfo culture = new CultureInfo("pt-BR");


            if (!IsPostBack)
            {
                string s = "";
                lblResultado.Text = new SistranBLL.KPI().Form01("Todos", Request["ini"], Request["fim"], ref s).ToString("#0.00");
                string strsql = "  SELECT ";
                strsql += " (SELECT MIN(PP.DATAHORADEENTRADA) FROM PORTARIA PP WHERE PP.DATAHORADEENTRADA BETWEEN CONVERT(DATETIME, '01/09/2011', 103) AND GETDATE() AND PP.IDFILIAL=PORT.IDFILIAL) DATAHORADEENTRADA,   ";
                strsql += " (SELECT MAX(PP.DATAHORADESAIDA) FROM PORTARIA PP WHERE PP.DATAHORADEENTRADA BETWEEN CONVERT(DATETIME, '01/09/2011', 103) AND GETDATE() AND PP.IDFILIAL=PORT.IDFILIAL) DATAHORADESAIDA	  ";
                strsql += " FROM ROMANEIO ROM   ";
                strsql += " INNER JOIN ROMANEIODOCUMENTO ROMDOC ON ROMDOC.IDROMANEIO = ROM.IDROMANEIO   ";
                strsql += " INNER JOIN DOCUMENTO DOC ON DOC.IDDOCUMENTO = ROMDOC.IDDOCUMENTO   ";
                strsql += " INNER JOIN DOCUMENTOITEM DI ON DI.IDDOCUMENTO = DOC.IDDOCUMENTO   ";
                strsql += " INNER JOIN PORTARIA PORT ON PORT.IDFILIAL = DOC.IDFILIAL   ";
                strsql += " INNER JOIN PRODUTOEMBALAGEM PE ON PE.IDPRODUTOEMBALAGEM = DI.IDPRODUTOEMBALAGEM   ";
                strsql += " INNER JOIN PRODUTOCLIENTE PC ON PC.IDPRODUTOCLIENTE = PE.IDPRODUTOCLIENTE    ";
                strsql += " WHERE ROM.TIPO='ENTRADA'  AND DOC.IDCLIENTE IN (" + Sistran.Library.FuncoesUteis.retornarClientes() + ")   ";
                strsql += " AND PORT.DATAHORADEENTRADA BETWEEN CONVERT(DATETIME, '" + Request["ini"] + "', 103)  ";
                strsql += " AND CONVERT(DATETIME, '" + Request["fim"] + " 23:59:59', 103)   ";
                strsql += " AND PORT.DATAHORADESAIDA IS NOT NULL  GROUP BY PORT.IDFILIAL  ";

                DataTable dt = Sistran.Library.GetDataTables.RetornarDataTable(strsql, "");

                if (dt.Rows.Count > 0)
                {
                    lblInicio.Text = dt.Rows[0][0].ToString();
                    lblFim.Text = dt.Rows[0][1].ToString();
                }

                strsql = "  SELECT DISTINCT PLACA, PORT.DATAHORADEENTRADA, PORT.DATAHORADESAIDA, '00:00' 'PERMANENCIA',  ISNULL(CADTRANSP.RAZAOSOCIALNOME,'') TRANSPORTADORA";
                strsql += " FROM ROMANEIO ROM     ";
                strsql += " INNER JOIN ROMANEIODOCUMENTO ROMDOC ON ROMDOC.IDROMANEIO = ROM.IDROMANEIO     ";
                strsql += " INNER JOIN DOCUMENTO DOC ON DOC.IDDOCUMENTO = ROMDOC.IDDOCUMENTO     ";
                strsql += " INNER JOIN DOCUMENTOITEM DI ON DI.IDDOCUMENTO = DOC.IDDOCUMENTO     ";
                strsql += " INNER JOIN PORTARIA PORT ON PORT.IDFILIAL = DOC.IDFILIAL     ";
                strsql += " INNER JOIN PRODUTOEMBALAGEM PE ON PE.IDPRODUTOEMBALAGEM = DI.IDPRODUTOEMBALAGEM     ";
                strsql += " INNER JOIN PRODUTOCLIENTE PC ON PC.IDPRODUTOCLIENTE = PE.IDPRODUTOCLIENTE       ";
                strsql += " LEFT JOIN DTROMANEIO DTROM ON DTROM.IDROMANEIO = ROM.IDROMANEIO   ";
                strsql += " LEFT JOIN DT DT ON DT.IDDT = DTROM.IDDT  ";
                strsql += " LEFT JOIN CADASTRO CADTRANSP ON CADTRANSP.IDCADASTRO = DT.IDTRANSPORTADORA ";
                strsql += " WHERE ROM.TIPO='ENTRADA'  AND DOC.IDCLIENTE IN (" + Sistran.Library.FuncoesUteis.retornarClientes() + ")     ";
                strsql += " AND PORT.DATAHORADEENTRADA BETWEEN CONVERT(DATETIME, '" + Request["ini"] + "', 103)  ";
                strsql += " AND CONVERT(DATETIME, '" + Request["fim"] + " 23:59:59', 103)   ";
                strsql += " AND PORT.DATAHORADESAIDA IS NOT NULL    ";
                strsql += " ORDER BY PORT.DATAHORADEENTRADA DESC ";
                DataTable dts = Sistran.Library.GetDataTables.RetornarDataTable(strsql);

                lblInicio0.Text = dts.Rows.Count.ToString();

                for (int i = 0; i < dts.Rows.Count; i++)
                {
                    TimeSpan ts = Convert.ToDateTime(dts.Rows[i][2]) - Convert.ToDateTime(dts.Rows[i][1]);
                    string hours = Convert.ToInt32(ts.TotalHours).ToString();
                    string minutes = ts.Minutes.ToString();
                    string seconds = ts.Seconds.ToString();

                    if (Convert.ToInt32(seconds) > 30)
                    {
                        minutes = (ts.Minutes + 1).ToString();
                    }
                    dts.Rows[i][3] = (hours.Length == 1 ? "0" + hours : hours) + "h " + (minutes.Length == 1 ? "0" + minutes : minutes) + "m ";
                }

                Panel1 = new cReport().gerarReportKpi01("kpi01", dts, Panel1);

            }
        }
        catch (Exception ex)
        {
            ScriptManager.RegisterClientScriptBlock(Master.FindControl("Up"), this.GetType(), "Alert", "alert('" + ex.Message.Replace("'", "´") + "')", true);
        }

    }

   
 
 
 

}